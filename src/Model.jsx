/*
Initial state of this JSX component was auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useRef, useEffect, useLayoutEffect } from "react";
import { useGLTF, PerspectiveCamera, useAnimations } from "@react-three/drei";
import { gsap } from "gsap";
import * as THREE from "three";
import { useLoader } from "@react-three/fiber";
import { RGBELoader } from "three-stdlib";
import { ScrollTrigger } from "gsap/ScrollTrigger";
gsap.registerPlugin(ScrollTrigger);

export default function Model(props) {
  const group = useRef();
  const baseNeon = useRef();

  // Loads the .gltf file and instantiate some elements from the loaded object.
  const { nodes, materials, animations } = useGLTF(props.model);
  // grab the animations using useAnimations hook.
  const anim = useAnimations(animations, group);
  // helper texture to cast better lights on the metal base.
  const texture = useLoader(RGBELoader, "https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr");

  // generates refs for all key caps.
  const keys = [
    "dial",
    "keyadd",
    "keyclean",
    "keycms",
    "keydesktop",
    "keyinteractions",
    "keylandscape",
    "keyportrait",
    "keypreview",
    "keyproperties",
    "keypublish",
    "keystyles",
    "keytablet",
  ];

  let keyRefs = {};

  keys.forEach(key => {
    keyRefs[key] = useRef();
  });

  // Setup recommended on: https://greensock.com/react/
  useLayoutEffect(() => {
    // get the first animation - the gltf file only has one.
    const animationDuration = animations[0].duration;
    const clip = anim.actions[anim.names];
    // these two lines below avoid showing the first frame at the end of the loop / scroll.
    clip.clampWhenFinished = true;
    clip.loop = THREE.LoopOnce;

    clip.play();
    const mixer = clip.getMixer();

    // for some reason must be set to 0 otherwise the clip will not be properly paused.
    let ctx = gsap.context(() => {
      // the proxy object is where we will sync the scrollTrigger progress
      // with the animation progress.
      let proxy = {
        get time() {
          return mixer.time;
        },
        set time(value) {
          clip.paused = false;
          mixer.setTime(value);
          clip.paused = true;
        },
      };

      proxy.time = 0;

      // Initializes timeline for scroll animation.
      gsap
        .timeline({
          scrollTrigger: {
            trigger: document.getElementById("page-wrapper"),
            pin: false,
            scrub: 1,
            start: "top top",
            end: "bottom bottom",
            markers: false,
          },
        })
        .fromTo(
          proxy,
          {
            time: 0,
          },
          {
            time: animationDuration,
            ease: "none",
            duration: 3,
          }
        );

      // Timeline to handle the neon color loop.
      const tl = gsap.timeline({
        repeat: -1,
        ease: "none",
        yoyo: true,
      });

      tl.to(baseNeon.current.material.color, {
        r: 0.25,
        g: 0.3,
        b: 11.8,
        duration: 1,
      });
      tl.to(baseNeon.current.material.color, {
        r: 0.6,
        g: 0.2,
        b: 11.8,
        duration: 1,
      });
    }, group);

    return () => ctx.revert();
  });

  useEffect(() => {
    // Triggers a custom event that will click on an html element with a
    // [wfe-trigger-loader-close] data attribute. We'll use this to hide the loading state
    // on Webflow with a invisible interactions trigger.
    document.dispatchEvent(
      new CustomEvent("wf-event-trigger", {
        bubbles: true,
        detail: { label: "click:loader-close" },
      })
    );
  });

  // Helper funtions to handle the key caps clicks. This is where we use
  // the refs created previously.
  function animateClickIn(id) {
    if (keyRefs[id].current.name === "dial") {
      gsap.to(keyRefs[id].current.rotation, {
        y: Math.PI,
        duration: 0.1,
      });
    } else {
      gsap.to(keyRefs[id].current.position, {
        y: 0.06,
        duration: 0.1,
      });
    }
  }

  function animateClickOut(id) {
    if (keyRefs[id] && keyRefs[id].current) {
      if (keyRefs[id].current.name === "dial") {
        gsap.to(keyRefs[id].current.rotation, {
          y: 0,
          duration: 0.1,
        });
      } else {
        gsap.to(keyRefs[id].current.position, {
          y: 0.09,
          duration: 0.1,
        });
      }
    }
  }

  return (
    <group ref={group} {...props} dispose={null}>
      <group name='Scene'>
        <directionalLight
          intensity={3}
          castShadow={true}
          shadow-mapsize={256}
          shadow-camera-far={500}
          shadow-camera-near={1}
          shadow-bias={-0.0005}
          color='#ffffff'
          name='light_top'
          position={[-2.2, 22.82, -31.31]}
          rotation={[-0.93, 0, 0]}
          scale={16.61}
        />
        <directionalLight
          castShadow={true}
          shadow-mapsize={256}
          shadow-camera-far={500}
          shadow-camera-near={1}
          shadow-bias={-0.0005}
          color='#ffffff'
          name='light_side'
          position={[12.09, 3.22, 40.33]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={16.61}
        />
        <group name='camera' position={[-18.27, 2.39, 0]} rotation={[Math.PI / 2, 0, Math.PI / 2]}>
          <PerspectiveCamera name='camera_Orientation' makeDefault={true} far={1000} near={1} fov={28.42} rotation={[-Math.PI / 2, 0, 0]} />
        </group>
        <mesh
          name='base_neon'
          // castShadow
          receiveShadow
          geometry={nodes.base_neon.geometry}
          position={[0, -0.24, 0]}
          scale={6.28}
          ref={baseNeon}
        >
          <meshBasicMaterial color={[0.25, 0.3, 11.8]} toneMapped={false} />
          <mesh
            name='bottom_metal'
            receiveShadow
            geometry={nodes.bottom_metal.geometry}
            material={materials.metal}
            envMap={texture}
            position={[0, -0.1, 0]}
            scale={0.84}
          />
          <mesh
            name='bottom_rubber'
            castShadow
            receiveShadow
            geometry={nodes.bottom_rubber.geometry}
            material={materials.rubber}
            position={[0, -0.06, 0]}
            scale={0.84}
          />
          <mesh
            name='dial'
            ref={keyRefs["dial"]}
            castShadow
            receiveShadow
            geometry={nodes.dial.geometry}
            material={materials["key.white"]}
            position={[0.53, 0.09, 0.53]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();
              animateClickIn("dial");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("dial");
            }}
          />
          <mesh
            name='keybase'
            castShadow
            receiveShadow
            geometry={nodes.keybase.geometry}
            material={materials["metal.grey"]}
            position={[0.53, 0.09, -0.18]}
            scale={0.16}
          />
          <mesh
            name='screw'
            castShadow
            receiveShadow
            geometry={nodes.screw.geometry}
            material={materials["steel.screw"]}
            position={[0, 0.04, 0]}
            scale={0.16}
          />
          <mesh
            name='base_steel'
            castShadow
            receiveShadow
            geometry={nodes.base_steel.geometry}
            material={materials["steel.dark"]}
            position={[0, 0.04, 0]}
            scale={0.87}
          />
          <mesh
            name='keyadd'
            ref={keyRefs["keyadd"]}
            castShadow
            receiveShadow
            geometry={nodes.keyadd.geometry}
            material={materials["key.add"]}
            position={[-0.53, 0.09, -0.18]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();
              animateClickIn("keyadd");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keyadd");
            }}
          />
          <mesh
            name='keyclean'
            ref={keyRefs["keyclean"]}
            castShadow
            receiveShadow
            geometry={nodes.keyclean.geometry}
            material={materials["key.clean"]}
            position={[0.18, 0.09, 0.18]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();

              animateClickIn("keyclean");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keyclean");
            }}
          />
          <mesh
            name='keycms'
            ref={keyRefs["keycms"]}
            castShadow
            receiveShadow
            geometry={nodes.keycms.geometry}
            material={materials["key.cms"]}
            position={[-0.53, 0.09, 0.18]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();
              animateClickIn("keycms");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keycms");
            }}
          />
          <mesh
            name='keydesktop'
            ref={keyRefs["keydesktop"]}
            castShadow
            receiveShadow
            geometry={nodes.keydesktop.geometry}
            material={materials["key.desktop"]}
            position={[-0.18, 0.09, -0.53]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();

              animateClickIn("keydesktop");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keydesktop");
            }}
          />
          <mesh
            name='keyinteractions'
            ref={keyRefs["keyinteractions"]}
            castShadow
            receiveShadow
            geometry={nodes.keyinteractions.geometry}
            material={materials["key.interactions"]}
            position={[0.18, 0.09, 0.53]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();

              animateClickIn("keyinteractions");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keyinteractions");
            }}
          />
          <mesh
            name='keylandscape'
            ref={keyRefs["keylandscape"]}
            castShadow
            receiveShadow
            geometry={nodes.keylandscape.geometry}
            material={materials["key.landscape"]}
            position={[-0.18, 0.09, 0.18]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();

              animateClickIn("keylandscape");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keylandscape");
            }}
          />
          <mesh
            name='keyportrait'
            ref={keyRefs["keyportrait"]}
            castShadow
            receiveShadow
            geometry={nodes.keyportrait.geometry}
            material={materials["key.portrait"]}
            position={[-0.18, 0.09, 0.53]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();
              animateClickIn("keyportrait");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keyportrait");
            }}
          />
          <mesh
            name='keypreview'
            ref={keyRefs["keypreview"]}
            castShadow
            receiveShadow
            geometry={nodes.keypreview.geometry}
            material={materials["key.preview"]}
            position={[0.53, 0.09, -0.18]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();

              animateClickIn("keypreview");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keypreview");
            }}
          />
          <mesh
            name='keyproperties'
            ref={keyRefs["keyproperties"]}
            castShadow
            receiveShadow
            geometry={nodes.keyproperties.geometry}
            material={materials["key.properties"]}
            position={[0.18, 0.09, -0.18]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();
              animateClickIn("keyproperties");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keyproperties");
            }}
          />
          <mesh
            name='keypublish'
            ref={keyRefs["keypublish"]}
            castShadow
            receiveShadow
            geometry={nodes.keypublish.geometry}
            material={materials["key.publish"]}
            position={[0.53, 0.09, 0.18]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();
              animateClickIn("keypublish");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keypublish");
            }}
          />
          <mesh
            name='keystyles'
            ref={keyRefs["keystyles"]}
            castShadow
            receiveShadow
            geometry={nodes.keystyles.geometry}
            material={materials["key.styles"]}
            position={[0.18, 0.09, -0.53]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();
              animateClickIn("keystyles");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keystyles");
            }}
          />
          <mesh
            name='keytablet'
            ref={keyRefs["keytablet"]}
            castShadow
            receiveShadow
            geometry={nodes.keytablet.geometry}
            material={materials["key.tablet"]}
            position={[-0.18, 0.09, -0.18]}
            scale={0.16}
            onPointerDown={e => {
              e.stopPropagation();

              animateClickIn("keytablet");
            }}
            onPointerUp={e => {
              e.stopPropagation();
              animateClickOut("keytablet");
            }}
          />
        </mesh>
      </group>
    </group>
  );
}
